# -*- coding: utf-8 -*-
"""train_scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/149X0IBt7SwsCtlznok8OAKAqr8GQU9Cz

# Train-Scratch

In this file we TRAIN.
"""

LOCAL_MODE = True

#if not LOCAL_MODE:
#  from google.colab import drive
#  from google.colab.patches import cv2_imshow
#
#  drive.mount('/content/drive', force_remount=True)
#
#  !cd /content; rm -r processed; 7z x drive/Shareddrives/deep_learning/processed.128_87.7z; ls -alF processed
#  TRAIN_PATH = "/content/processed/"
#  LOCAL_MODELS_FOLDER = "/content/drive/Shareddrives/deep_learning/models"
#
#!pip install tensorflow --quiet

import tensorflow as tf
from common import *

model = tf.keras.Sequential([
    tf.keras.Input(shape=(HEIGHT, WIDTH, COLOR_MODE.channels)),
    tf.keras.layers.Rescaling(1./255),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(N_CLASSES, activation='softmax')
])

compile_model(model)
model.summary()

evalutate(model, "model.1dense")

model = tf.keras.Sequential([
    tf.keras.Input(shape=(HEIGHT, WIDTH, COLOR_MODE.channels)),
    tf.keras.layers.Rescaling(1./255),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu',
                          kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-5, l2=1e-4),
                          bias_regularizer=tf.keras.regularizers.L2(1e-4),
                          activity_regularizer=tf.keras.regularizers.L2(1e-5)),
    tf.keras.layers.Dropout(0.6),
    tf.keras.layers.Dense(64, activation='relu',
                          kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-5, l2=1e-4),
                          bias_regularizer=tf.keras.regularizers.L2(1e-4),
                          activity_regularizer=tf.keras.regularizers.L2(1e-5)
                          ),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(N_CLASSES, activation='softmax')
])

compile_model(model)
model.summary()

evalutate(model, "model.2dense")

"""## Augmentation


"""

data_augmentation = tf.keras.Sequential([
  tf.keras.layers.RandomFlip("horizontal"), # Applies horizontal flipping to a random 50% of the images
  tf.keras.layers.RandomRotation(0.1), # Rotates the input images by a random value in the range[–10%, +10%] (fraction of full circle [-36°, 36°])
  tf.keras.layers.RandomZoom(0.2), # Zooms in or out of the image by a random factor in the range [-20%, +20%]
], name="ruotaingrandimento")

model = tf.keras.Sequential([
    tf.keras.Input(shape=(HEIGHT, WIDTH, COLOR_MODE.channels)),
    tf.keras.layers.Rescaling(1./255),
    data_augmentation,
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu',
                          kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-5, l2=1e-4),
                          bias_regularizer=tf.keras.regularizers.L2(1e-4),
                          activity_regularizer=tf.keras.regularizers.L2(1e-5)),
    tf.keras.layers.Dropout(0.6),
    tf.keras.layers.Dense(64, activation='relu',
                          kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-5, l2=1e-4),
                          bias_regularizer=tf.keras.regularizers.L2(1e-4),
                          activity_regularizer=tf.keras.regularizers.L2(1e-5)
                          ),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(N_CLASSES, activation='softmax')
])

compile_model(model)
model.summary()
evalutate(model, "model.2dense.aug")

# HJ
model = tf.keras.Sequential([
    tf.keras.Input(shape=(HEIGHT, WIDTH, COLOR_MODE.channels)),
    tf.keras.layers.Rescaling(1./255),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(512, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(2048, activation='relu', kernel_regularizer=tf.keras.regularizers.L1L2(l1=1e-4, l2=1e-3),
                          bias_regularizer=tf.keras.regularizers.L2(1e-3),
                          activity_regularizer=tf.keras.regularizers.L2(1e-4)),
    tf.keras.layers.Dropout(0.8),
    tf.keras.layers.Dense(1024, activation='relu'),
    tf.keras.layers.Dropout(0.65),
    tf.keras.layers.Dense(512, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(N_CLASSES, activation='softmax')
])

compile_model(model)
model.summary()
evalutate(model, "model.3dense")
